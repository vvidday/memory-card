{"version":3,"sources":["components/Card.js","images/bear01.webp","images/bear02.webp","images/bear03.webp","images/bear04.webp","images/bear05.webp","images/bear06.webp","images/bear07.webp","images/bear08.webp","images/bear09.webp","images/bear10.webp","images/bear11.webp","images/bear12.webp","components/Gamegrid.js","components/Scoreboard.js","components/Notification.js","images/helpicon.svg","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","alt","onClick","guess","Gamegrid","useState","bear01","bear02","bear03","bear04","bear05","bear06","bear07","bear08","bear09","bear10","bear11","bear12","picarr","setPicarr","guesses","setGuesses","useEffect","scrambleGrid","includes","updateScore","new_arr","slice","push","increaseScore","length","copy","i","index","Math","floor","random","splice","id","tmp","generateGrid","Scoreboard","currentScore","highScore","Notification","text","toggle","App","score","setScore","notifhidden","setNotifhidden","notiftext","setNotifText","toggleNotif","help","console","log","current","old","high","max","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.faa0977a.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../styles/card.css';\r\n\r\nexport const Card = (props) => {\r\n    return (\r\n        <div className = \"card\">\r\n            <img src={props.src} alt=\"Bear\" onClick =  {() => props.guess(props.src)}></img>\r\n        </div>\r\n    );\r\n}","export default __webpack_public_path__ + \"static/media/bear01.79fd6a12.webp\";","export default __webpack_public_path__ + \"static/media/bear02.19f663ad.webp\";","export default __webpack_public_path__ + \"static/media/bear03.c99e42cd.webp\";","export default __webpack_public_path__ + \"static/media/bear04.553b0d10.webp\";","export default __webpack_public_path__ + \"static/media/bear05.6799a2d1.webp\";","export default __webpack_public_path__ + \"static/media/bear06.74531d23.webp\";","export default __webpack_public_path__ + \"static/media/bear07.6a862147.webp\";","export default __webpack_public_path__ + \"static/media/bear08.67d8e026.webp\";","export default __webpack_public_path__ + \"static/media/bear09.6043582f.webp\";","export default __webpack_public_path__ + \"static/media/bear10.d94e3ad7.webp\";","export default __webpack_public_path__ + \"static/media/bear11.9628184e.webp\";","export default __webpack_public_path__ + \"static/media/bear12.fa0b4f58.webp\";","import React, { useEffect, useState } from 'react';\r\nimport { Card } from './Card';\r\nimport '../styles/gamegrid.css';\r\nimport bear01 from '../images/bear01.webp';\r\nimport bear02 from '../images/bear02.webp';\r\nimport bear03 from '../images/bear03.webp';\r\nimport bear04 from '../images/bear04.webp';\r\nimport bear05 from '../images/bear05.webp';\r\nimport bear06 from '../images/bear06.webp';\r\nimport bear07 from '../images/bear07.webp';\r\nimport bear08 from '../images/bear08.webp';\r\nimport bear09 from '../images/bear09.webp';\r\nimport bear10 from '../images/bear10.webp';\r\nimport bear11 from '../images/bear11.webp';\r\nimport bear12 from '../images/bear12.webp';\r\n\r\nexport const Gamegrid = (props) => {\r\n\r\n    const [picarr, setPicarr] = useState([\r\n        bear01,\r\n        bear02,\r\n        bear03,\r\n        bear04,\r\n        bear05,\r\n        bear06,\r\n        bear07,\r\n        bear08,\r\n        bear09,\r\n        bear10,\r\n        bear11,\r\n        bear12\r\n    ]);\r\n\r\n    const [guesses, setGuesses] = useState([]);\r\n\r\n    useEffect(()=>{\r\n        scrambleGrid();\r\n    }, [guesses]);\r\n\r\n    const guess = (src) =>{\r\n        if(guesses.includes(src)){\r\n            let new_arr = [];\r\n            setGuesses(new_arr);\r\n            props.updateScore();\r\n        }\r\n        else{\r\n            let new_arr = guesses.slice(0);\r\n            new_arr.push(src);\r\n            setGuesses(new_arr);\r\n            props.increaseScore();\r\n            if(new_arr.length === 12){\r\n                setGuesses([]);\r\n            }\r\n        }\r\n    }\r\n\r\n    const generateGrid = () =>{\r\n        let tmp = [];\r\n        for(let i of picarr){\r\n            tmp.push(\r\n                <Card src={i} guess={guess}/>\r\n            )\r\n        }\r\n        return tmp\r\n    }\r\n\r\n    const scrambleGrid = () =>{\r\n        let copy = picarr.slice(0);\r\n        let new_arr = [];\r\n        for(let i = copy.length; i > 0; i--){\r\n            let index = Math.floor(Math.random() * i)\r\n            new_arr.push(copy.splice(index, 1)[0]);\r\n        }\r\n        setPicarr(new_arr);\r\n    }\r\n\r\n\r\n\r\n\r\n    return(\r\n        <div id=\"gamegrid\">\r\n            {generateGrid()}\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport '../styles/scoreboard.css';\r\n\r\nexport const Scoreboard = (props) =>{\r\n\r\n\r\n    return (\r\n        <div className=\"scoreboard-container\">\r\n            <div className=\"score\" id=\"current-score\">Current Score: {props.currentScore}</div>\r\n            <div className=\"score\" id=\"high-score\">Total Score: {props.highScore}</div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport '../styles/notification.css';\r\n\r\nexport const Notification = (props) => (\r\n    <div className = \"notification-container\">\r\n        <div className=\"notification-box\">\r\n            <p>{props.text}</p>\r\n            <button className=\"notification-button\" onClick = {props.toggle}>Back</button>\r\n        </div>\r\n    </div>\r\n);","export default __webpack_public_path__ + \"static/media/helpicon.8a2faa64.svg\";","import './styles/app.css';\nimport { Gamegrid } from './components/Gamegrid';\nimport { Scoreboard } from './components/Scoreboard';\nimport { Notification } from './components/Notification';\nimport help from './images/helpicon.svg';\nimport React, {useState} from 'react';\n\nfunction App() {\n\n  const [score, setScore] = useState([0, 0]);\n\n  const increaseScore = () => {\n    setScore([score[0] + 1, score[1]]);\n\n    if(score[0] === 11){\n      setScore([0, 12]);\n      setNotifText( \"Congratulations, you win! Well done.\");\n      toggleNotif();\n    }\n    \n  } \n\n  const updateScore = () => {\n    console.log(\"ran\");\n    const current = score[0];\n    const old = score[1];\n    const high = Math.max(current, old);\n    setScore([0, high]);\n    \n    let text = \"\";\n    if(current === 12) text = \"Congratulations, you win! Well done.\";\n    else if(current > old) text = \"Game Over! You selected the same picture twice. On the bright side, you achieved a new high-score of \" + current + \".\";\n    else if (current === old) text = \"Game Over! You selected the same picture twice. You tied your previous best score of \" + current +\".\";\n    else text = \"Game Over! You selected the same picture twice. Your current high-score is \" + old +\".\";\n    \n    setNotifText(text);\n    toggleNotif();\n  }\n\n  const [notifhidden, setNotifhidden ] = useState(true);\n  const [notiftext, setNotifText ] = useState(\"\");\n\n  const toggleNotif = () => setNotifhidden(!notifhidden);\n\n  return (\n    <div>\n      {notifhidden \n      ? <button id=\"info-button\" onClick = {()=>{\n        setNotifText(\"Welcome to the Bear Memory Game! Your goal is to click on all twelve bear photos without clicking on the same one twice. Good luck!\")\n        toggleNotif();\n      }}><img alt=\"info button\" src={help}></img></button>\n       : <Notification toggle = {toggleNotif} text={notiftext}/> }\n\n      \n      <h1>Bear Memory Game</h1>\n      <Scoreboard currentScore = {score[0]} highScore = {score[1]} />\n      <Gamegrid increaseScore = {increaseScore} updateScore = {updateScore}/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}